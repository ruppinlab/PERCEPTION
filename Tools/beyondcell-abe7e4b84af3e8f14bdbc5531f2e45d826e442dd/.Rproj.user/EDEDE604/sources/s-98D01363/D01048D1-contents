---
title: "R Notebook"
output:
html_notebook: default
---

<!-- Running PERCEPTION for new datasets-->

<!-- Step1: loading necessary files -->
```{r, setup, include=FALSE}
# Set working directory to the directory where "SCPO_submission" is cloned.
working_directory='/Users/mukherjees11/Documents/SCPO_submission'
knitr::opts_knit$set(root.dir = working_directory)
```

```{r}
onTarget=readRDS('Data/DepMapv12.RDS')
# Function to load a RMD file to another
ksource <- function(x, ...) {
  library(knitr)
  source(purl(x, output = tempfile()), ...)
}
ksource('Tools/step0A_functions_needed.Rmd')
ksource('Tools/step0B_functions_needed.Rmd')
genesUsed_toBuild=readRDS('Data/genesUsed_toBuild.RDS')
genes_across_scRNA_datasets_ofInterest=readRDS('Data/genes_across_scRNA_datasets_ofInterest.RDS')
approved_drugs_model=readRDS('Data/FDA_approved_drugs_models.RDS')
```
<!-- Load Patient malignant cells expression and metadata -->
<!-- The users should prepare their data in the following file formats. Three example files are provided PRJNA591860_sample_cell_names.RDS,PRJNA591860.RDS, and  Sample_data_response.xlsx -->
```{r}
sample_cell_names=readRDS("Data/PRJNA591860_sample_cell_names.RDS")
Total_cell_each_patient=sapply(sample_cell_names, length)
# Total patients with at least one malignant cell (N=39)
sum(Total_cell_each_patient>0)
sample_data=readRDS("Data/PRJNA591860.RDS")
dim(sample_data)
response_data=readxl::read_xlsx('Data/Sample_data_response.xlsx')
```

<!-- Step2: Build PERCEPTION Models -->

<!-- Create Inputs for PERCEPTION -->
```{r}
# DOI stands for Drugs of interest; PERCEPTION will be run on these drugs; For each drug, there will be a seperate model.
#Here, we demonstrated how PERCEPTION model could be build for two drugs. User can build the models for any of the 44 drugs.
#Check the name of 44 drugs using the following command
#names(approved_drugs_model)

drugs2focus=c("dabrafenib","erlotinib")
DOI=intersect(names(approved_drugs_model), drugs2focus)
cancerType='PanCan'
# What features are we using?
genesUsed_toBuild=Reduce(intersect,list(rownames(onTarget$expression_20Q4),
                                        rownames(onTarget$scRNA_complete),
                                        rownames(sample_data)))

# How many features should the model use?
Possible_Number_of_features=nrow(onTarget$expression_rnorm) * seq(0.0005, 0.02, length = 5)
```
<!-- feature Selection/Ranking using Bulk -->
```{r message=FALSE, warning=FALSE, paged.print=FALSE}
features_bulk_all_cancer_type_Cavg=run_parallel_feature_ranking_bulk(id_cancerType = cancerType,
                                                                     infunc_DrugsToUse=DOI,
                                                                     resp_measure_mode = 'AUC',
                                                                     infunc_exclude_cancer = 'PanCan')
#How feature ranking looks like?
head(features_bulk_all_cancer_type_Cavg[[1]], 5)
```
<!-- Initialize list to save perception output; Provide cores for parallelization -->
```{r message=FALSE, warning=FALSE, paged.print=FALSE}
Raw_models_output <- list();
Performance_by_features <- list(); for_output_lung_Test_vglm <- list()
cl <- parallel::makeForkCluster(4)
doParallel::registerDoParallel(cl)
```
<!-- Build and tune PERCEPTION -->
<!-- In the below code, the outer loop iterates over the drugs of interest (DOI) and the inner loop iterates over a parameter of input genes. The build_on_BULK_v2 function is called to build the model, and the results are stored in the Raw_models_output list. The performance of each model is printed and stored in the Performance_by_features list. The best model for each drug is stored in the for_output_lung_Test_vglm list. The final models are saved to a file. -->
```{r message=FALSE, warning=FALSE, paged.print=FALSE}
# Iterate over the DOI (drugs of interest)
for (i in 1:length(DOI)) {
  # Initialize variables
  Raw_models_output <- list()
  id_counter <- 1
  # For each given drug; iterate over a parameter of 'features count'
  for (infunc_k_features_grid in Possible_Number_of_features ) {
    # Build the model
    Raw_models_output[[id_counter]] <- build_on_BULK_v2(
      infunc_drugName = DOI[i],
      infunc_cancerType = cancerType,
      infunc_features = rownames(features_bulk_all_cancer_type_Cavg[[i]]),
      single_best = rownames(features_bulk_all_cancer_type_Cavg[[i]])[1],
      k_features = infunc_k_features_grid,
      mode = 'AUC',
      model_type = 'glmnet',
      exclude_cancer = 'PanCan'
    )
    id_counter <- id_counter + 1
  }

  # Print and store the performance
  print(sapply(Raw_models_output, function(x) x$performance_in_scRNA))
  Performance_by_features[[i]] <- lapply(Raw_models_output, function(x) x$performance_in_scRNA)

  # Store the Tuned model
  for_output_lung_Test_vglm[[i]] <- err_handle(Raw_models_output[[which.max(sapply(Raw_models_output, function(x) x$performance_in_scRNA)[2,])]])
  
  # Remove temporary variables and garbage collect
  rm(Raw_models_output)
  gc()
}

# Stop parallel processing
parallel::stopCluster(cl)

# Assign names to the TUned models and save them
names(for_output_lung_Test_vglm) <- DOI
Tuned_models_output <- for_output_lung_Test_vglm
saveRDS(Tuned_models_output, paste('Data/PERCEPTION_models_DOI', Sys.time(), '.RDS',sep=''))
```

<!-- Step3: seurat_clustering given an expression matrix -->
```{r}
require(Seurat)
seurat_clustering <- function(input_matrix){
  cluster_so <- CreateSeuratObject(counts = input_matrix,
                                project = "lungv0",
                                min.cells = 3,
                                min.features = 200)
  cluster_so <- NormalizeData(cluster_so, normalization.method = "LogNormalize", scale.factor = 10000)
  cluster_so <- FindVariableFeatures(cluster_so, selection.method = "vst", nfeatures = 2000)
  cluster_so <- ScaleData(cluster_so)
  cluster_so <- RunPCA(cluster_so, features = VariableFeatures(object = cluster_so))
  cluster_so <- FindNeighbors(cluster_so, dims = 1:10)
  cluster_so <- FindClusters(cluster_so, resolution = 0.8)
  return(cluster_so)
}
set.seed(1)
cluster_so=seurat_clustering(sample_data)
cluster_so <- RunUMAP(cluster_so, dims = 1:10)
figure1_umap_dataset=DimPlot(cluster_so, reduction = "umap")
ggsave(figure1_umap_dataset, filename = 'Figures/Fig1.png', height=6, width=6)
# <!-- Create Clone ID for each cell-->
subClone_id=Idents(cluster_so)
```

<!-- Step4: Add Patient annotation -->
```{r}
subClone_id_df=data.frame(subClone_id)
patient_ann=sample_cell_names
# Patient and clone info for each cell
paitent_n_cloneAnn=lapply(1:length(sample_cell_names), function(x) {
  err_handle(data.frame(clone_id=subClone_id[match(sample_cell_names[[
    names(sample_cell_names)[x] ]], names(subClone_id))],
             patient_id=names(sample_cell_names)[x],
             cell_id= sample_cell_names[[ names(sample_cell_names)[x] ]]
  ))
  }
)
names(paitent_n_cloneAnn)=names(sample_cell_names)
paitent_n_cloneAnn_df=do.call(rbind, paitent_n_cloneAnn)
head(paitent_n_cloneAnn_df)
Cluster_abundance_in_patients=aggregate(cell_id~ clone_id+patient_id , paitent_n_cloneAnn_df, length)
Cluster_abundance_in_patients_list=split(Cluster_abundance_in_patients ,Cluster_abundance_in_patients$patient_id)
Cluster_abundance_in_patients_2plot=do.call(rbind, lapply(Cluster_abundance_in_patients_list, function(x) data.frame(x, proportion=x[,3]/sum(x[,3]))))
Cluster_abundance_in_patients_2plot$Treatment_Timepoint=response_data$`Treatement Timepoint`[match(Cluster_abundance_in_patients_2plot$patient_id, response_data$`Sample Name`)]
```
<!-- Subclonal Expression (approximation, sum over the cluster) -->
```{r}
paitent_n_cloneAnn=paitent_n_cloneAnn[names(unlist(sapply(paitent_n_cloneAnn,nrow)))]

subclone_meanExp=lapply(paitent_n_cloneAnn,function(x) 
  data.frame(sapply(split(x$cell_id, factor(x$clone_id)), function(y)
    rowMeans_if_one_row(data.frame(sample_data[,y])) ))
         )
```

<!-- Step5: Model Performance in patient data -->
```{r}
# Obtain the drug response models
drug_models<-Tuned_models_output
corr_matrix=cbind(
  bulk=unlist(lapply(drug_models,function(x)x$performance_in_bulk[2])),
  pseudo_bulk=unlist(lapply(drug_models,function(x)x$performance_in_pseudo_bulk[2])),
  sc=unlist(lapply(drug_models,function(x)x$performance_in_scRNA[2])) )
rownames(corr_matrix)=names(drug_models)

pval_matrix=cbind(
  bulk=unlist(lapply(drug_models,function(x)x$performance_in_bulk[1])),
  pseudo_bulk=unlist(lapply(drug_models,function(x)x$performance_in_pseudo_bulk[1])),
  sc=unlist(lapply(drug_models,function(x)x$performance_in_scRNA[1]))
)
rownames(pval_matrix)=names(drug_models)
#Number of cell lines with AUC values used in validation
TotalcellLines_used_in_validation=unlist(lapply(
  drug_models,function(x)length(na.omit(x$predVSgroundTruth$pred_gt_mscRNA$Observed))))
```
<!-- Select the significant drug models -->
```{r}
significant_drugs_names=names(which(corr_matrix[,3]>0.3 & pval_matrix[,3]<0.05)) #
#Drug models from PERCEPTION
significant_drugs_models=drug_models[significant_drugs_names]
```

<!-- Step6: Compute Improvement Score-->
<!-- Monotherapy Killing for each clone-->
```{r}
subclone_meanExp_rnorm=lapply(subclone_meanExp, function(x) 
  err_handle(data.frame(rank_normalization_mat(data.frame(x[genesUsed_toBuild,])), 
                        row.names = genesUsed_toBuild) ) )
killing_eachClone_list= lapply(subclone_meanExp_rnorm, function(x)
  err_handle(killing_in_each_dataset(infunc_scRNAseq_dataset_rnorm=x,
                                     infunc_GOI=genesUsed_toBuild,
                                     infun_model_list=significant_drugs_models)) )

killing_eachClone_list_wd_paitentID=lapply(names(killing_eachClone_list), function(x) cbind(x,
                                                        killing_eachClone_list[[x]]))
names(killing_eachClone_list_wd_paitentID)=names(killing_eachClone_list)
Killing_at_clone_level=do.call(rbind, lapply(names(Cluster_abundance_in_patients_list), function(x)
  data.frame(CloneID = Cluster_abundance_in_patients_list[[x]]$clone_id,
             killing_eachClone_list_wd_paitentID[[x]]) ))
```
<!-- Plot Distribution of abundance of the transcriptional clones (y-axis) in each patient -->
```{r}
figure2_panel <- ggplot(Cluster_abundance_in_patients_2plot,
                 aes(fill=clone_id, y=proportion, x=patient_id)) + 
    geom_bar(position="stack", stat="identity")+
  theme_bw(base_size = 15)+
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), legend.position = 'top')+
  facet_grid(.~Treatment_Timepoint, shrink = T, scales = "free", space = "free_x")+
  labs(y='Clone\nProportion')
ggsave(figure2_panel, filename = 'Figures/Fig2.png', height=4, width=6)
```
<!-- Plot Killing at clone level for the drugs Erlotinib and dabrafenib (which we built the PERCEPTION model) -->
```{r}
Killing_at_clone_level$Treatment=response_data$Treatment[
  match(Killing_at_clone_level$x, response_data$`Sample Name`)]
Killing_at_clone_level$Response=response_data$`Treatement Timepoint`[
  match(Killing_at_clone_level$x, response_data$`Sample Name`)]
erlotinib_id=grep('erlotinib',Killing_at_clone_level$Treatment)
osimertinib_id=grep('osimertinib',Killing_at_clone_level$Treatment)
dabrafenib_id=grep('dabrafenib',Killing_at_clone_level$Treatment)
trametinib_id=grep('trametinib',Killing_at_clone_level$Treatment)
Killing_at_clone_level$erlotinib=as.numeric(Killing_at_clone_level$erlotinib)
Killing_at_clone_level$dabrafenib=as.numeric(Killing_at_clone_level$dabrafenib)

figure3_panel=ggplot(Killing_at_clone_level[erlotinib_id,], aes(y=erlotinib, x=CloneID))+
  geom_point(aes(color= erlotinib, size=erlotinib))+
  geom_segment( aes(x=CloneID,
                    xend=CloneID, y=0, 
                    yend=erlotinib), color="black")+
  facet_grid(.~Response+x,
             scales = 'free_x', shrink = T,
             drop = T,  space = "free_x", switch = 'x',
             as.table = T)+
  theme_bw(base_size = 11)+
  scale_colour_viridis_c()+
  theme(legend.position = 'top',
        strip.placement = 'outside',
        strip.background = element_rect(fill="white", size=1, color="white"),
        strip.text = element_text(angle=0,
                                  color=c(rep(hue_pal()(2)[1],7),rep(hue_pal()(2)[2],21))
  )
        )+
  labs(x='Clones', y='Predicted Viability of\nErlotinib (z-score)',
       color= 'Predicted Viability', size='Predicted Viability')

ggsave(figure3_panel, filename = 'Figures/Fig3.png', height=5, width=9)

figure4_panel=ggplot(Killing_at_clone_level[dabrafenib_id,], aes(y=dabrafenib, x=CloneID))+
  geom_point(aes(color= dabrafenib, size=dabrafenib))+
  geom_segment( aes(x=CloneID,
                    xend=CloneID, y=0, 
                    yend=dabrafenib), color="black")+
  facet_grid(.~Response+x,
             scales = 'free_x', shrink = T,
             drop = T,  space = "free_x", switch = 'x',
             as.table = T)+
  theme_bw(base_size = 11)+
  scale_colour_viridis_c()+
  theme(legend.position = 'top',
        strip.placement = 'outside',
        strip.background = element_rect(fill="white", size=1, color="white"),
        strip.text = element_text(angle=0,
                                  color=c(rep(hue_pal()(2)[1],7),rep(hue_pal()(2)[2],21))
  )
        )+
  labs(x='Clones', y='Predicted Viability of\ndabrafenib (z-score)',
       color= 'Predicted Viability', size='Predicted Viability')
ggsave(figure4_panel, filename = 'Figures/Fig4.png', height=5, width=9)

```
<!-- Patient level killing (colMax) -->
```{r}
# Convert list to df
killing_eachClone_list_wd_paitentID_df=do.call(rbind, killing_eachClone_list_wd_paitentID)
# Scale the killing
killing_eachClone_scaled=data.frame(Patient_ID=killing_eachClone_list_wd_paitentID_df[,1],
           apply(killing_eachClone_list_wd_paitentID_df[,-1], 2, function(x) scale(as.numeric(x))))
# Convert back to list
killing_eachClone_scaled_list=split(killing_eachClone_scaled[,-1],
                                    killing_eachClone_scaled$Patient_ID)
```
<!-- Compute Patient response from Clone response -->
```{r}
# Rule: Most resistant clone best reflects the clinical response
Killing_patient_level=sapply(killing_eachClone_scaled_list, colMax)

# Rule: Most resistant clone best reflects the clinical response
Killing_patient_level=data.frame(Killing_patient_level)
```
<!-- Load the demographics provided -->
```{r}
Killing_patient_level=t(Killing_patient_level)
#Sample_data_response=readxl::read_xlsx('Data/Sample_data_response.xlsx')
sort(table(response_data$`Patient ID`))
Killing_patient_level_ann_biopsy_timepoint=cbind(Killing_patient_level, 
response_data[match(rownames(Killing_patient_level),
                         response_data$`Sample Name`),])
```
<!-- Predicted response by their responder (RD) vs. non-responder (PD) status -->
```{r}

treatment_PD_samples=Killing_patient_level_ann_biopsy_timepoint$`Treatement Timepoint`=='PD'
treatment_RD_samples=Killing_patient_level_ann_biopsy_timepoint$`Treatement Timepoint`=='RD'
significant_drugs_names=colnames(Killing_patient_level)
treatment_PD_Killing_each_drug=Killing_patient_level_ann_biopsy_timepoint[treatment_PD_samples,significant_drugs_names]
treatment_PD_Killing_each_drug_mean=colMeans(treatment_PD_Killing_each_drug)
#treatment_PD_Killing_each_drug_mean
treatment_RD_Killing_each_drug=Killing_patient_level_ann_biopsy_timepoint[treatment_RD_samples,significant_drugs_names]
treatment_RD_Killing_each_drug_mean=colMeans(treatment_RD_Killing_each_drug)
#treatment_RD_Killing_each_drug_mean

# Create data frame with unequal vector size
max_length_drug1 <- max(c(length(treatment_RD_Killing_each_drug[1][,]), length(treatment_PD_Killing_each_drug[1][,])))
RD_drug1 = c(treatment_RD_Killing_each_drug[1][,], rep(NA, max_length_drug1 - length(treatment_RD_Killing_each_drug[1][,])))
PD_drug1 = c(treatment_PD_Killing_each_drug[1][,], rep(NA, max_length_drug1 - length(treatment_PD_Killing_each_drug[1][,])))
plot_data_drug1 <- data.frame(RD_drug1, PD_drug1)

max_length_drug2 <- max(c(length(treatment_RD_Killing_each_drug[2][,]), length(treatment_PD_Killing_each_drug[2][,])))
RD_drug2 = c(treatment_RD_Killing_each_drug[2][,], rep(NA, max_length_drug1 - length(treatment_RD_Killing_each_drug[2][,])))
PD_drug2 = c(treatment_PD_Killing_each_drug[2][,], rep(NA, max_length_drug1 - length(treatment_PD_Killing_each_drug[2][,])))
plot_data_drug2 <- data.frame(RD_drug2, PD_drug2)

#png(plot_data_drug1, filename = 'Figures/Fig5.png')
boxplot(plot_data_drug1, col = c("orange","red"), names = c("RD", "PD"), main="dabrafenib",  xlab = "Treatment Response", ylab = "Predicted Viability")
stripchart(plot_data_drug1, vertical = TRUE, pch = 19, add = TRUE, col = "blue")
dev.copy(png,filename="Figures/Fig5.png")
dev.off ()

#png(plot_data_drug2, filename = 'Figures/Fig6.png')
boxplot(plot_data_drug2, col = c("orange","red"), names = c("RD", "PD"), main="erlotinib",  xlab = "Treatment Response", ylab = "Predicted Viability")
stripchart(plot_data_drug2, vertical = TRUE, pch = 1, add = TRUE, col = "blue")
dev.copy(png,filename="Figures/Fig6.png")
dev.off ()

```



Sanju